{
  "_args": [
    [
      {
        "raw": "group-by@0.0.1",
        "scope": null,
        "escapedName": "group-by",
        "name": "group-by",
        "rawSpec": "0.0.1",
        "spec": "0.0.1",
        "type": "version"
      },
      "/Users/suzieisrael/deplabs_accelerator_theme/node_modules/grunt-mozu-appdev-sync"
    ]
  ],
  "_from": "group-by@0.0.1",
  "_id": "group-by@0.0.1",
  "_inCache": true,
  "_location": "/group-by",
  "_npmUser": {
    "name": "tjholowaychuk",
    "email": "tj@vision-media.ca"
  },
  "_npmVersion": "1.1.61",
  "_phantomChildren": {},
  "_requested": {
    "raw": "group-by@0.0.1",
    "scope": null,
    "escapedName": "group-by",
    "name": "group-by",
    "rawSpec": "0.0.1",
    "spec": "0.0.1",
    "type": "version"
  },
  "_requiredBy": [
    "/grunt-mozu-appdev-sync"
  ],
  "_resolved": "https://registry.npmjs.org/group-by/-/group-by-0.0.1.tgz",
  "_shasum": "857620575f6714786f8d86bb19fd13e188dd68a4",
  "_shrinkwrap": null,
  "_spec": "group-by@0.0.1",
  "_where": "/Users/suzieisrael/deplabs_accelerator_theme/node_modules/grunt-mozu-appdev-sync",
  "component": {
    "scripts": {
      "group-by/index.js": "index.js"
    }
  },
  "dependencies": {
    "to-function": "*"
  },
  "description": "Group an array by property values or callback",
  "devDependencies": {
    "mocha": "*",
    "should": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "857620575f6714786f8d86bb19fd13e188dd68a4",
    "tarball": "https://registry.npmjs.org/group-by/-/group-by-0.0.1.tgz"
  },
  "maintainers": [
    {
      "name": "tjholowaychuk",
      "email": "tj@vision-media.ca"
    }
  ],
  "name": "group-by",
  "optionalDependencies": {},
  "readme": "\n# group-by\n\n  Group an array of values by property or callback function.\n\n## Installation\n\n    $ component install component/group-by\n    $ npm install group-by\n\n## API\n\n### groupBy(array, prop)\n\n  Map returning a new array:\n\n```js\nvar groupBy = require('group-by');\n\nvar log1 = { type: 'log', version: '1.0.0' };\nvar log2 = { type: 'log', version: '1.1.0' };\nvar log3 = { type: 'log', version: '1.3.0' };\nvar app1 = { type: 'app', version: '1.0.0' };\nvar app2 = { type: 'app', version: '1.1.0' };\n\nvar nodes = [log1, app1, log2, log3, app2];\n\ngroupBy(nodes, 'type');\n```\n\nyields:\n\n```js\n{ log: \n   [ { type: 'log', version: '1.0.0' },\n     { type: 'log', version: '1.1.0' },\n     { type: 'log', version: '1.3.0' } ],\n  app: \n   [ { type: 'app', version: '1.0.0' },\n     { type: 'app', version: '1.1.0' } ] }\n```\n\n### groupBy(array, fn)\n\n  Group with an arbitrary `fn`, returning a key name:\n\n```js\ngroupBy(users, function(user){\n  return user.pets.length\n    ? 'hasPets'\n    : 'noPets';\n})\n```\n\n# License\n\n  MIT\n",
  "version": "0.0.1"
}
